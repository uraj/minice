1.Uncondition Jump No Initial//Done
2.NULL statement//Done
3.Boolean to Arith//Done
4.triargexpr.h use Insert//Done
5.put some of table's func to expr so as to avoid conflicts//No conflicts
6.immed number's problem, 1[0*] => 1, don't know why // fixed

7.deal with String constant?//Done

new:
8.about return statment.//Done

9.Some free.

10.Problems in getting triargexpr's 'triargexpr_list', because when we want to divide the code into basic blocks, we need to get the beginning of the next block with "goto (index)", but we cann't get 'triargexpr_list' from 'index'. We need a pointer in 'triargexpr'.//Done

11.No Arglist, don't know why.//Done
12.Only one var as an expression//Done

13.Some optimizing in fd, there are some parallel edges//Done, but need to be checked later
14.Position of a++//Done
15.How to deal with UncondJump (-1)//Done. -1 means the end block
16.Some no use uncondjump convert from TrueJump and FalseJump//Done

17.Deal with pointer//Done
18.Deal with Nullop in udanalyse
19.Same arg name in arglist? should be a symtable too?//Done
20.Unknow error....//Done
21.deal with allocating register for condition jump//Done

22 typet_free_typetree中的base_type莫名其妙等于1，问题出在测试文件zero.c的16行，minic_paser.y的359行//Done

23.--pointer, segmentation fault
24.segmentation fault when testing test.c in minic_flowanalyse.c//Done
25.error when pointer = array head
26.const calculate	//Done
27.isglobal //Done
28.global var def when step into one function //Done
29.total string num //Done

30.deal with dirty and has_refed for global_var//Done
31.deal with return in basic_block//Done
32.deal with width//Done
33.生成三元式的时候，需要生成一条返回语句，让所有原来跳转到-1的三元式跳转到它//Done
34.+1和-1需要改成立即数//Done

1.global_var_last_ref//uncertainty
2.mark whether the temp var is a pointer
3.offset may be too big when addressing characters
4.store global var before func, and load after func//Done
5.Ref//Done
6.deal with array in triargexpr with binary op//Done
7.How can we make sure that temp array head always marked in mem after register allocation//Done
8.Optimize push param//Done
9.Deal with param's addr//Done
10.flush global var before leaving func//Done
11.Mov out param from r0~r3//Done
12.Use pre indexed load store in gen_tempreg//Done

13.ident的var_info中的index和mem_addr没有初始化//Done
14.有一些没有出现在活跃变量中，但却拥有map_id的三元式编号变量。（有可能是varmapping里面的问题？）
15.endless loop when compile lala.c//Done
16.The param which not been used is always in memory.//Done
17.gen and restore temp_reg//Done
18.ignore unused parameter//Done
19.error when restore temp register//Done
20.
consider this case:
	k = a + 1;(1)
	b = k + 1;(2)
	because in (1) k is not active while a is active.
	so the register allocation result may be:
		a -> r7
		k -> r7
	whether we prepare "a" first or prepare "k" first, one of k and a will be flushed out of register r7.
	How about treat k as active var in (1), that is easier to modify.

21.The order of Arglist
22.Bug in binary arithmetic//Done
23.bug_1.c//Done
24.bug when generate label for global var//Done
25.optimize binary op and assgin
26.endless loop when test t10.c//Done
27.bug_3.c
28.Bug for Uminus immediate number
29.Const string on the right side of equals sign
30.Some optimize when caller save//Done
31.The pointer as parameter may need some flush.
32.Bug for quicksort.


1、triargtable。
2、machinecode.c:2134，立即数不能逻辑移位。//Done
3、sp计算有问题，返回加的和一开始减的不一致，遇到的几个都是返回时少了8。//Done
4、pointer_entity在flush的时候，可以不考虑链为空（也就是所有变量都要刷新）的情况，
5、arglist a，a是局部数组，要把a的地址给r0，而不是a[0]。//Done
		   现在是ldw r0, [fp-], a.mem_addr;
		   应该是sub r0, fp, a.mem_addr。
6、例如a=b（a寄存器为r4，与另一个全局变量g公用寄存器，此时a活跃g不活跃），此时假如会造成错误，那么只可能content表明r4中是a，而其实是g，如此g就不会被写回而丢失数据。但是由于每一个可能结束的块结尾g都活跃，那么a=b之后，如果g被引用，那么之前一定有一次定值，如此以来，此处是否回写g根本不重要。
    如果不考虑函数调用，那么在全局变量不活跃的时候，对与该全局变量共用寄存器的变量定值，不会影响全局变量的正确性。也就是说，content不需要。只需要在调用函数或者最后返回的时候，将所有活跃的全局变量刷回内存即可。
	若考虑到函数调用，可以分析出该函数中所有的活跃全局变量；简单起见，应该选择每次对全局变量定值的时候都写回内存。（而且没有优化！！！！）

12月29更新
1、每翻译一条三元式之前根据活跃变量修改寄存器内容//Done
2、prepare之标记参数所在位置，生成全局变量标号//Done
3、指针
平时：
a、非空，正常
b、空，出数组首地址和字符串常量首地址外的所有全局变量

参数：
in
a、非空，正常刷下,非空的东东何在一起
b、空，不管，有flush_global_var

out
a、非空正常load
b、空load所

4、咚咚的任务：函数调用的活跃变量分析时，将所有caller中定值过的全局变量放入var_list中
5、大哥的任务：对于每个Funcall语句，将callee的所有arglist对应的pointer_entity合成一个链，外加所有caller中定值的全局变量，merge在一起。放在Funcall的arg2中
4、triargtable


